schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

# expression to compare columns of type Int. All fields are combined with logical 'AND'.
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

# mutation root
type mutation_root {
  # delete data from the table: "team"
  delete_team(
    # filter the rows which have to be deleted
    where: team_bool_exp!
  ): team_mutation_response

  # delete single row from the table: "team"
  delete_team_by_pk(id: Int!): team

  # insert data into the table: "team"
  insert_team(
    # the rows to be inserted
    objects: [team_insert_input!]!

    # on conflict condition
    on_conflict: team_on_conflict
  ): team_mutation_response

  # insert a single row into the table: "team"
  insert_team_one(
    # the row to be inserted
    object: team_insert_input!

    # on conflict condition
    on_conflict: team_on_conflict
  ): team

  # update data of the table: "team"
  update_team(
    # increments the integer columns with given value of the filtered values
    _inc: team_inc_input

    # sets the columns of the filtered rows to the given values
    _set: team_set_input

    # filter the rows which have to be updated
    where: team_bool_exp!
  ): team_mutation_response

  # update single row of the table: "team"
  update_team_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: team_inc_input

    # sets the columns of the filtered rows to the given values
    _set: team_set_input
    pk_columns: team_pk_columns_input!
  ): team
}

# column ordering options
enum order_by {
  # in the ascending order, nulls last
  asc

  # in the ascending order, nulls first
  asc_nulls_first

  # in the ascending order, nulls last
  asc_nulls_last

  # in the descending order, nulls first
  desc

  # in the descending order, nulls first
  desc_nulls_first

  # in the descending order, nulls last
  desc_nulls_last
}

# query root
type query_root {
  # fetch data from the table: "team"
  team(
    # distinct select on columns
    distinct_on: [team_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [team_order_by!]

    # filter the rows returned
    where: team_bool_exp
  ): [team!]!

  # fetch aggregated fields from the table: "team"
  team_aggregate(
    # distinct select on columns
    distinct_on: [team_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [team_order_by!]

    # filter the rows returned
    where: team_bool_exp
  ): team_aggregate!

  # fetch data from the table: "team" using primary key columns
  team_by_pk(id: Int!): team
}

# expression to compare columns of type String. All fields are combined with logical 'AND'.
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

# subscription root
type subscription_root {
  # fetch data from the table: "team"
  team(
    # distinct select on columns
    distinct_on: [team_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [team_order_by!]

    # filter the rows returned
    where: team_bool_exp
  ): [team!]!

  # fetch aggregated fields from the table: "team"
  team_aggregate(
    # distinct select on columns
    distinct_on: [team_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [team_order_by!]

    # filter the rows returned
    where: team_bool_exp
  ): team_aggregate!

  # fetch data from the table: "team" using primary key columns
  team_by_pk(id: Int!): team
}

# columns and relationships of "team"
type team {
  id: Int!
  logo: String!
  name: String!
}

# aggregated selection of "team"
type team_aggregate {
  aggregate: team_aggregate_fields
  nodes: [team!]!
}

# aggregate fields of "team"
type team_aggregate_fields {
  avg: team_avg_fields
  count(columns: [team_select_column!], distinct: Boolean): Int
  max: team_max_fields
  min: team_min_fields
  stddev: team_stddev_fields
  stddev_pop: team_stddev_pop_fields
  stddev_samp: team_stddev_samp_fields
  sum: team_sum_fields
  var_pop: team_var_pop_fields
  var_samp: team_var_samp_fields
  variance: team_variance_fields
}

# order by aggregate values of table "team"
input team_aggregate_order_by {
  avg: team_avg_order_by
  count: order_by
  max: team_max_order_by
  min: team_min_order_by
  stddev: team_stddev_order_by
  stddev_pop: team_stddev_pop_order_by
  stddev_samp: team_stddev_samp_order_by
  sum: team_sum_order_by
  var_pop: team_var_pop_order_by
  var_samp: team_var_samp_order_by
  variance: team_variance_order_by
}

# input type for inserting array relation for remote table "team"
input team_arr_rel_insert_input {
  data: [team_insert_input!]!
  on_conflict: team_on_conflict
}

# aggregate avg on columns
type team_avg_fields {
  id: Float
}

# order by avg() on columns of table "team"
input team_avg_order_by {
  id: order_by
}

# Boolean expression to filter rows from the table "team". All fields are combined with a logical 'AND'.
input team_bool_exp {
  _and: [team_bool_exp]
  _not: team_bool_exp
  _or: [team_bool_exp]
  id: Int_comparison_exp
  logo: String_comparison_exp
  name: String_comparison_exp
}

# unique or primary key constraints on table "team"
enum team_constraint {
  # unique or primary key constraint
  team_pkey
}

# input type for incrementing integer column in table "team"
input team_inc_input {
  id: Int
}

# input type for inserting data into table "team"
input team_insert_input {
  id: Int
  logo: String
  name: String
}

# aggregate max on columns
type team_max_fields {
  id: Int
  logo: String
  name: String
}

# order by max() on columns of table "team"
input team_max_order_by {
  id: order_by
  logo: order_by
  name: order_by
}

# aggregate min on columns
type team_min_fields {
  id: Int
  logo: String
  name: String
}

# order by min() on columns of table "team"
input team_min_order_by {
  id: order_by
  logo: order_by
  name: order_by
}

# response of any mutation on the table "team"
type team_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [team!]!
}

# input type for inserting object relation for remote table "team"
input team_obj_rel_insert_input {
  data: team_insert_input!
  on_conflict: team_on_conflict
}

# on conflict condition type for table "team"
input team_on_conflict {
  constraint: team_constraint!
  update_columns: [team_update_column!]!
  where: team_bool_exp
}

# ordering options when selecting data from "team"
input team_order_by {
  id: order_by
  logo: order_by
  name: order_by
}

# primary key columns input for table: "team"
input team_pk_columns_input {
  id: Int!
}

# select columns of table "team"
enum team_select_column {
  # column name
  id

  # column name
  logo

  # column name
  name
}

# input type for updating data in table "team"
input team_set_input {
  id: Int
  logo: String
  name: String
}

# aggregate stddev on columns
type team_stddev_fields {
  id: Float
}

# order by stddev() on columns of table "team"
input team_stddev_order_by {
  id: order_by
}

# aggregate stddev_pop on columns
type team_stddev_pop_fields {
  id: Float
}

# order by stddev_pop() on columns of table "team"
input team_stddev_pop_order_by {
  id: order_by
}

# aggregate stddev_samp on columns
type team_stddev_samp_fields {
  id: Float
}

# order by stddev_samp() on columns of table "team"
input team_stddev_samp_order_by {
  id: order_by
}

# aggregate sum on columns
type team_sum_fields {
  id: Int
}

# order by sum() on columns of table "team"
input team_sum_order_by {
  id: order_by
}

# update columns of table "team"
enum team_update_column {
  # column name
  id

  # column name
  logo

  # column name
  name
}

# aggregate var_pop on columns
type team_var_pop_fields {
  id: Float
}

# order by var_pop() on columns of table "team"
input team_var_pop_order_by {
  id: order_by
}

# aggregate var_samp on columns
type team_var_samp_fields {
  id: Float
}

# order by var_samp() on columns of table "team"
input team_var_samp_order_by {
  id: order_by
}

# aggregate variance on columns
type team_variance_fields {
  id: Float
}

# order by variance() on columns of table "team"
input team_variance_order_by {
  id: order_by
}

